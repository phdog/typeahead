Index: client/search/actions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/search/actions.ts	(revision )
+++ client/search/actions.ts	(revision )
@@ -0,0 +1,11 @@
+import { createAction } from 'redux-actions';
+import * as action from './constants/ActionTypes';
+
+const flushSearch = createAction<void>(
+    action.FLUSH_SEARCH,
+    () => { }
+);
+
+export {
+    flushSearch
+};
\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 286960f2bceb0a34b22476f3c5da8d54ff48baa0)
+++ package.json	(revision )
@@ -24,6 +24,7 @@
     "react-dom": "15.4.2",
     "react-redux": "5.0.3",
     "redux": "3.6.0",
+    "redux-actions": "0.8.0",
     "redux-logger": "3.0.6",
     "reselect": "3.0.1",
     "semantic-ui-react": "0.70.0",
@@ -40,6 +41,7 @@
     "@types/react-dom": "0.14.23",
     "@types/react-redux": "4.4.37",
     "@types/redux": "3.6.0",
+    "@types/redux-actions": "1.2.2",
     "@types/reselect": "2.2.0",
     "awesome-typescript-loader": "3.1.2",
     "babel-core": "6.23.1",
Index: client/main/components/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/main/components/App.tsx	(revision 286960f2bceb0a34b22476f3c5da8d54ff48baa0)
+++ client/main/components/App.tsx	(revision )
@@ -1,36 +1,43 @@
 import { Dispatch } from 'redux';
 import { connect } from 'react-redux';
 import * as React from 'react';
-import * as action from '../../search/constants/ActionTypes';
+import { flushSearch } from '../../search/actions';
 import {
   Input,
   Output
 } from '../../search';
 import './App.css';
 
-interface AppProps {
-  dispatch: Dispatch<{}>;
+interface DispatchProps {
+  flushSearch: Function
 }
 
-class App extends React.Component<AppProps, void> {
+class App extends React.Component<DispatchProps, void> {
 
   handleMouseDown(e) {
-    const { dispatch } = this.props;
-    if (e.target.className !== 'item')
-    dispatch({type: action.FLUSH_SEARCH})
+    if (e.target.className !== 'item') {
+      this.props.flushSearch();
+    }
   }
 
   render() {
 
     return (
       <div className='page' onMouseDown={this.handleMouseDown.bind(this)}>
-      <div className='container'>
-          <Input />
-          <Output />
-      </div>
+        <div className='container'>
+            <Input />
+            <Output />
+        </div>
       </div>
     );
   }
 }
 
-export default connect(null)(App);
+const mapDispatchToProps = (dispatch: Dispatch<{}>): DispatchProps => ({
+  flushSearch: () => {
+    dispatch(flushSearch());
+  }
+});
+
+export default connect(mapDispatchToProps)(App);
+
